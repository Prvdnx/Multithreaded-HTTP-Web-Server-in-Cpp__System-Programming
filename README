
==== What is HTTP ? ====
    Hypertext Tranfer Protocol. this is a standard of application layer communication protocol for transmitting
hyper media documents such as html, pdf, jpg etc. between two or more networks, where one is the master or
server and th rest are clients or slave.
    HTTP is everywhere! Every website we visit on the internet is ran on HTTP server. You may think, then what
about HTTPS servers. Technically, HTTPS is same as HTTP but with more security. Many programmers at some
point or the other may get curious about how HTTP servers work and how to build one from the scratch without
any external libraries.
    The diference between http server or web server and other servers is that http or web server follow some
standard rules or protocols in their implementation. The http server default port is 8080 or 80, but other ports
can be used. So when www.websiteName.com is typed, the client which is the web browser will automatically add
the port to it, so it becomes www.websiteName.com:8080. When connecting on a different port, one must specify
the port value otherwise the default port is assumed. Other servers which are not standard like the http server
will use a different port of their choice, therefore you as the client must add the port value while connecting
to the server e.g Chat servers etc.
    Other servers follow similar method of design as the http server but without the strict rules.


==== What is a Socket? ====
    A socket is the mechanism that most popular operating systems provide to give programs access to the network.
It allows messages to be sent and received between applications (unrelated processes) on thesame or different
networked machines. The sockets mechanism has been created to be independent of any specific type of network. IP
addressing, however, is by far the most dominant network and the most popular use of sockets.
    Programming with TCP/IP sockets. There are a few steps involved in using sockets in design of this server:
    1. Create the socket.
    2. Identify the socket.
    3. On the server, wait for an incoming connection.
    4. Send and receive messages.
    5. Close the socket.

* Step 1. Create the socket ----
    There are several kinds of sockets but there are two major and most commonly used ones: One is "Stream Sockets",
the other is "Datagram Sockets". They may here after be referred to as "SOCK_STREAM" and "SOCK_DGRAM", respectively.
Datagram sockets are sometimes called "connectionless sockets". Stream sockets are reliable two-way connected
communication streams, this means that the server and client stay connected throughout the transmission process. If
you output two items into the socket in the order "1,2", they will arrive in the order "1,2" at the opposite end.
    Datagram Sockets, why are they connectionless? It's because you don't have to maintain an open connection as you
do with Stream sockets. You just build a packet, slap an IP header on it with destination information, and send it
out. No connection needed. They are generally used either when a TCP stack is unavailable or when a few dropped
packets doesn't constitute much errors. Sample applications include, tftp (trivial file transfer protocol, a little
brother to FTP), dhcpcd (a DHCP client), multiplayer games, streaming audio, video conferencing, etc. Datagram also
use IP for routing, but they don't use TCP; they use the "User Datagram Protocol", or "UDP"(see RFC7685).

    To create a Socket:    int server_fd = socket(domain, type, protocol);
=="domain", also referred to as the address family - is the communication domain in which the socket should be created.
Some of address families includes AF_INET (IP), AF_INET6 (IPv6), AF_UNIX (local channel, similar to pipes), AF_ISO
(ISO protocols), and AF_NS (Xerox Network Systems protocols). AF_INET and AF_INET6 are most common.
=="type", type of service. This is selected according to properties required by the application: for TCP transmission
it can be SOCK_STREAM (for virtual circuit service), for UDP transmission it can be a SOCK_DGRAM (for datagram service),
SOCK_RAW (for direct IP service). Check with your address family to see whether a particular service is available.
=="protocol", indicates a specific protocol to use in supporting the sockets operation. This is useful in cases where
some families may have more than one protocol to support a given type of service. The return value is a file descriptor
(a small integer). The analogy of creating a socket is that of requesting a telephone line from the phone company.
    For TCP/IP sockets, we will want to specify the IP address family (AF_INET) and virtual circuit service (SOCK_STREAM).
Since there's only one form of virtual circuit service, there are no variations of the protocol, so the last argument (the
procotol) will be written as zero (0).
